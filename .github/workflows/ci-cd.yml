name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    
    - name: Run unit tests
      run: |
        cd src
        pytest tests/ --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./src/coverage.xml
        fail_ci_if_error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Flask app
      uses: docker/build-push-action@v3
      with:
        context: .
        file: src/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ github.sha }}
    
    - name: Build and push Nginx
      uses: docker/build-push-action@v3
      with:
        context: .
        file: nginx/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:latest
          ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v3
    
    - name: Configure Kubernetes credentials
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        kubectl set image deployment/flask-deployment flask-app=${{ secrets.DOCKER_USERNAME }}/flask-app:${{ github.sha }}
        kubectl set image deployment/nginx-deployment nginx=${{ secrets.DOCKER_USERNAME }}/nginx-proxy:${{ github.sha }}
        kubectl rollout status deployment/flask-deployment
        kubectl rollout status deployment/nginx-deployment

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
